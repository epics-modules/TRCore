# This file is part of the Transient Recorder Framework.
# It is subject to the license terms in the LICENSE.txt file found in the
# top-level directory of this distribution and at
# https://confluence.slac.stanford.edu/display/ppareg/LICENSE.html. No part
# of the Transient Recorder Framework, including this file, may be copied,
# modified, propagated, or distributed except according to the terms
# contained in the LICENSE.txt file.


# Macros:
#   PREFIX  - prefix of records (: is implied)
#   PORT    - port name of the TRBaseDriver based instance
#   SIZE - waveform size (NELM) for time array
#   PRESAMPLES - "#" if presamples are not supported, "" if supported
#   TIME_UNIT_INV - initial value of TIME_UNIT_INV, default is 1
#   TIME_EGU - EGU field of TIME_DATA, default is "s"
#   TIMESTAMP_FMT - timestamp format (default %Y-%m-%d %H:%M:%S.%06f)
#   PERSECOND_FIELDS - extra fields for perSecond record (default empty)
#   AUTORESTART_ZNAM - ZNAM for autoRestart (default Off)
#   AUTORESTART_ONAM - ONAM for autoRestart (default On)
#   LNK_NEW_BURST - link to process after information for a new burst
#                   is available (default empty)
#   NOCLK - set to "#" to disable sample rate configuration records
#           (default empty - enabled).

# Device name.
record(stringin, "$(PREFIX):name") {
    field(PINI, "YES")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),0,0)DIGITIZER_NAME")
    # Enabling buffer to prevent deadlock, see
    # http://www.aps.anl.gov/epics/modules/soft/asyn/R4-31/KnownProblems.html
    # Size 1 does not work so use 2.
    info(asyn:FIFO, "2")
}

# This record is used to request arming or disarming.
# It directly writes to the asyn parameter.
record(mbbo, "$(PREFIX):set_arm") {
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0,0)ARM_REQUEST")
    field(ZRVL, "0")
    field(ZRST, "disarm")
    field(ONVL, "1")
    field(ONST, "postTrigger")
    $(PRESAMPLES) field(TWVL, "2")
    $(PRESAMPLES) field(TWST, "prePostTrigger")
    field(VAL,  "0")
    field(STAT, "NO_ALARM")
    field(SEVR, "NO_ALARM")
}

# This internal record receives updates of the current
# arm state from the asyn port.
record(mbbi, "$(PREFIX):_arm_state") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),0,0)ARM_STATE")
    field(ZRVL, "0")
    field(ZRST, "disarm")
    field(ONVL, "1")
    field(ONST, "postTrigger")
    field(TWVL, "2")
    field(TWST, "prePostTrigger")
    field(THVL, "3")
    field(THST, "busy")
    field(FRVL, "4")
    field(FRST, "error")
    field(FLNK, "$(PREFIX):_arm_state_changed")
}

# This record has two uses. Its value always reflects the
# current arm state (_arm_state). But it can also be written,
# which is equivalent to writing set_arm. Writing this record
# will not directly change its value.
record(mbbo, "$(PREFIX):arm")
{
    field(ZRST, "disarm")
    field(ONST, "postTrigger")
    $(PRESAMPLES) field(TWST, "prePostTrigger")
    field(THST, "busy")
    field(FRST, "error")
    # Using TSEL not FLNK to allow reverting the value before
    # monitors are posted.
    field(TSEL, "$(PREFIX):_handle_arm_write_tsel PP")
}

# This internal flag allows inhibiting handling of writes
# to arm when we are changing it internally.
record(longout, "$(PREFIX):_changing_arm") {
    field(VAL, "0")
}

# When the arm record is written:
# - If _changing_arm was true, clear _changing_arm.
# - Otherwise, write the value which was written into
#   set_arm and revert the arm value to _arm_state.
record(calc, "$(PREFIX):_handle_arm_write_tsel") {
    field(VAL,  "0") # Need 0 value for the TSEL link.
    field(FLNK, "$(PREFIX):_check_changing_arm")
}
record(fanout, "$(PREFIX):_check_changing_arm") {
    field(SELM, "Specified")
    field(SELL, "$(PREFIX):_check_changing_arm_calc PP")
    field(LNK1, "$(PREFIX):_clear_changing_arm")
    field(LNK2, "$(PREFIX):_forward_arm_write")
}
record(calc, "$(PREFIX):_check_changing_arm_calc") {
    field(INPA, "$(PREFIX):_changing_arm")
    field(CALC, "A?1:2")
}
record(calcout, "$(PREFIX):_clear_changing_arm") {
    field(CALC, "0")
    field(OUT,  "$(PREFIX):_changing_arm PP")
}
record(calcout, "$(PREFIX):_forward_arm_write") {
    field(INPA, "$(PREFIX):arm")
    field(CALC, "A")
    field(OUT,  "$(PREFIX):set_arm PP")
    field(FLNK, "$(PREFIX):_revert_arm_value")
}
record(calcout, "$(PREFIX):_revert_arm_value") {
    field(INPA, "$(PREFIX):_arm_state")
    field(CALC, "A")
    field(OUT,  "$(PREFIX):arm")
}

# When the _arm_state changes, update the value of arm to
# the same value. Set _changing_arm to 1 first so that
# the change is not mistaken as an external arm write.
record(calcout, "$(PREFIX):_arm_state_changed") {
    field(CALC, "1")
    field(OUT,  "$(PREFIX):_changing_arm PP")
    field(FLNK, "$(PREFIX):_update_arm_state")
}
record(calcout, "$(PREFIX):_update_arm_state") {
    field(INPA, "$(PREFIX):_arm_state")
    field(CALC, "A")
    field(OUT,  "$(PREFIX):arm PP")
}

# This determines whether acquisition should be disarmed
# after the first burst (autoRestart=Off) or should
# be continuous or a fixed number of bursts (autoRestart=On).
# This does not really have to exist since the driver just
# has a NUM_BURSTS setting that can be 0 (continuous) or
# >0 (fixed number). In order to follow the old GTR interface,
# the driver's NUM_BURSTS setting is calculated based on
# autoRestart and NUM_BURSTS.
record(bo, "$(PREFIX):autoRestart") {
    field(ZNAM, "$(AUTORESTART_ZNAM=Off)")
    field(ONAM, "$(AUTORESTART_ONAM=On)")
    field(VAL,  "$(DEFAULT_AUTORESTART=1)")
    field(STAT, "NO_ALARM")
    field(SEVR, "NO_ALARM")
    field(FLNK, "$(PREFIX):_update_numBursts")
}

# This setting has meaning only when autoRestart=On.
# In this case it means whether to read unlimited bursts
# (value is <=0) or a fixed number of bursts (value is positive).
record(longout, "$(PREFIX):NUM_BURSTS") {
    field(VAL,  "$(DEFAULT_NUM_BURSTS=0)")
    field(STAT, "NO_ALARM")
    field(SEVR, "NO_ALARM")
    field(FLNK, "$(PREFIX):_update_numBursts")
}

# This updates the NUM_BURSTS in the driver whenever
# based on autoRestart and NUM_BURSTS.
record(calcout, "$(PREFIX):_update_numBursts") {
    field(INPA, "$(PREFIX):autoRestart")
    field(INPB, "$(PREFIX):NUM_BURSTS")
    field(CALC, "A?(B<=0?0:B):1")
    field(OUT,  "$(PREFIX):_numBursts PP")
    field(PINI, "YES")
}
record(longout, "$(PREFIX):_numBursts") {
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0,0)DESIRED_NUM_BURSTS")
}

# Current effective NUM_BURSTS reported by the driver.
# We don't try to convert it back to autoRestart+NUM_BURSTS.
# 0 means unlimited, positive means some number of bursts.
record(ai,  "$(PREFIX):GET_ARMED_NUM_BURSTS") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),0,0)EFFECTIVE_NUM_BURSTS")
}

# Number of post-trigger samples (desired and effective).
record(longout, "$(PREFIX):numberPTS") {
    field(PINI, "YES")
    field(VAL,  "$(DEFAULT_NUM_PTS=900)")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0,0)DESIRED_NUM_POST_SAMPLES")
}
record(ai,  "$(PREFIX):get_numberPTS") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),0,0)EFFECTIVE_NUM_POST_SAMPLES")
}

# Total number of samples for prePostTrigger mode.
# This is only relevant when armed in prePostTrigger mode.
# In that case, it should be the total number of samples per burst
# (pre + post samples), and must be greater than numberPTS.
$(PRESAMPLES) record(longout, "$(PREFIX):numberPPS") {
$(PRESAMPLES)     field(PINI, "YES")
$(PRESAMPLES)     field(VAL,  "$(DEFAULT_NUM_PPS=0)")
$(PRESAMPLES)     field(DTYP, "asynInt32")
$(PRESAMPLES)     field(OUT,  "@asyn($(PORT),0,0)DESIRED_NUM_PRE_POST_SAMPLES")
$(PRESAMPLES) }
$(PRESAMPLES) record(ai, "$(PREFIX):get_numberPPS") {
$(PRESAMPLES)     field(SCAN, "I/O Intr")
$(PRESAMPLES)     field(DTYP, "asynFloat64")
$(PRESAMPLES)     field(INP,  "@asyn($(PORT),0,0)EFFECTIVE_NUM_PRE_POST_SAMPLES")
$(PRESAMPLES) }

# Requested sample rate (desired and effective).
# The desired record is meant to be internal since its value is
# determined  by other records (clock, customSampleRate).
$(NOCLK=) record(ao, "$(PREFIX):_requestedSampleRate") {
$(NOCLK=)     field(DTYP, "asynFloat64")
$(NOCLK=)     field(OUT,  "@asyn($(PORT),0,0)DESIRED_REQUESTED_SAMPLE_RATE")
$(NOCLK=) }
$(NOCLK=) record(ai, "$(PREFIX):GET_ARMED_REQUESTED_SAMPLE_RATE") {
$(NOCLK=)     field(SCAN, "I/O Intr")
$(NOCLK=)     field(DTYP, "asynFloat64")
$(NOCLK=)     field(INP,  "@asyn($(PORT),0,0)EFFECTIVE_REQUESTED_SAMPLE_RATE")
$(NOCLK=)     field(EGU,  "Hz")
$(NOCLK=)     field(PREC, "4")
$(NOCLK=) }

# Achievable sample rate (desired and effective).
# The desired achievable sample rate is calculated automatically
# from the desired requested sample rate, hence it is an input
# record.
$(NOCLK=) record(ai, "$(PREFIX):ACHIEVABLE_SAMPLE_RATE") {
$(NOCLK=)     field(SCAN, "I/O Intr")
$(NOCLK=)     field(DTYP, "asynFloat64")
$(NOCLK=)     field(INP,  "@asyn($(PORT),0,0)DESIRED_ACHIEVABLE_SAMPLE_RATE")
$(NOCLK=)     field(EGU,  "Hz")
$(NOCLK=)     field(PREC, "4")
$(NOCLK=) }
$(NOCLK=) record(ai, "$(PREFIX):GET_SAMPLE_RATE") {
$(NOCLK=)     field(SCAN, "I/O Intr")
$(NOCLK=)     field(DTYP, "asynFloat64")
$(NOCLK=)     field(INP,  "@asyn($(PORT),0,0)EFFECTIVE_ACHIEVABLE_SAMPLE_RATE")
$(NOCLK=)     field(EGU,  "Hz")
$(NOCLK=)     field(PREC, "4")
$(NOCLK=) }

# Sample rate used for the time array when armed.
# This value is reported by the driver during arming. It may be
# different from GET_SAMPLE_RATE depending on the clock logic of
# the driver.
record(ai, "$(PREFIX):GET_DISPLAY_SAMPLE_RATE") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),0,0)EFFECTIVE_SAMPLE_RATE")
    field(EGU,  "Hz")
    field(PREC, "4")
}

# Configuration of the unit for the time array (inverse).
# For example to get millisecond units, set this to 1000.
# It is you responsibility to set matching EGU in TIME_DATA.
record(ao, "$(PREFIX):TIME_UNIT_INV") {
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0,0)TIME_ARRAY_UNIT_INV")
    field(EGU,  "s^-1")
    field(VAL,  "$(TIME_UNIT_INV=1)")
    field(PINI, "YES")
}

# Time array.
record(waveform, "$(PREFIX):TIME_DATA") {
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn($(PORT)_time_array,0,0)ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "$(SIZE)")
    field(PREC, "10")
    field(EGU,  "$(TIME_EGU=s)")
}

# Update the time array when the time array parameters are updated.
record(longin, "$(PREFIX):_time_array_update") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT)_time_array,0,0)UPDATE")
    field(FLNK, "$(PREFIX):TIME_DATA")
}

# ID of last burst.
record(longin, "$(PREFIX):GET_BURST_ID") {
    field(SCAN, "I/O Intr")
    field(PRIO, "MEDIUM")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),0,0)BURST_ID")
    field(TSE,  "-2")
    field(FLNK, "$(PREFIX):_burst_id_changed")
}

# Date and time of the last burst, based on timestamp in GET_BURST_ID.
record(stringin, "$(PREFIX):GET_LAST_BURST_TIME") {
    field(DTYP, "Soft Timestamp")
    field(VAL,  "0")
    field(INP,  "@$(TIMESTAMP_FMT=%Y-%m-%d %H:%M:%S.%06f)")
    field(TSEL, "$(PREFIX):GET_BURST_ID.TIME")
}

# Time from burst start to completed.
record(ai, "$(PREFIX):GET_BURST_START_TO_BURST_END_TIME") {
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),0,0)BURST_TIME_BURST")
    field(EGU,  "us")
}
# Time from burst completed to burst read.
record(ai, "$(PREFIX):GET_BURST_END_TO_READ_END_TIME") {
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),0,0)BURST_TIME_READ")
    field(EGU,  "us")
}
# Time from burst read to burst processed.
record(ai, "$(PREFIX):GET_READ_END_TO_DATA_PROCESSED_TIME") {
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),0,0)BURST_TIME_PROCESS")
    field(EGU,  "us")
}

# When the burst ID changes:
# - Proces GET_LAST_BURST_TIME process.
# - Process the diagnostic times.
# - Increment the trigger count.
# - Process a user-defined link if defined.
record(fanout, "$(PREFIX):_burst_id_changed") {
    field(SELM, "All")
    field(LNK1, "$(PREFIX):GET_LAST_BURST_TIME")
    field(LNK2, "$(PREFIX):GET_BURST_START_TO_BURST_END_TIME")
    field(LNK3, "$(PREFIX):GET_BURST_END_TO_READ_END_TIME")
    field(LNK4, "$(PREFIX):GET_READ_END_TO_DATA_PROCESSED_TIME")
    field(LNK5, "$(PREFIX):_trigger_count")
    field(LNK6, "$(LNK_NEW_BURST=)")
}

# Bursts per second counter.
record(longin, "$(PREFIX):perSecond") {
    field(PINI, "YES")
    field(SCAN, "1 second")
    field(EGU,  "Hz")
    field(INP,  "$(PREFIX):_trigger_count")
    field(FLNK, "$(PREFIX):_reset_trigger_count")
    $(PERSECOND_FIELDS=)
}
record(calc, "$(PREFIX):_trigger_count") {
    field(CALC, "VAL+1")
}
record(calcout, "$(PREFIX):_reset_trigger_count") {
    field(CALC, "0")
    field(OUT,  "$(PREFIX):_trigger_count")
}

# Time delay in the read loop, for buffer overflow testing.
record(ao, "$(PREFIX):SET_TEST_READ_SLEEP_TIME") {
    field(PINI, "YES")
    field(VAL,  "0")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0,0)SLEEP_AFTER_BURST")
}
